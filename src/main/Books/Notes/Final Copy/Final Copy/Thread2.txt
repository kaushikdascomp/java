Synchronized block and synchronized method-
http://www.xyzws.com/Javafaq/what-are-the-differences-between-synchronized-method-and-synchronized-block-statement/84

sync block syncs on object and locks the specific object wherever necessary improving system performance

One object n two sync methods of same obj, but if one thread of obj enters one of the method, then no other thread of same obj or diff obj can 
access the other method

but in case of sync block, if
locks of diff objects

Transient and volatile modifiers:
When an instance variable is declared as volatile then its value need not persist when an object is stored

Volatile modifier tells the compiler that the variable modified by volatile can be changed unexpectedly by any parts of the program
Mostly used in multi threaded applications where one thread may change the variable value to other

Error and Exception- Error is a type of runtime exception which we cannot handle it/Unchecked Exception. It cannot be recovered like out of memory
so it is not put under try/catch blocks
http://java67.blogspot.co.uk/2012/12/difference-between-error-vs-exception.html

Concurrency:
Optimistic and Pessimistic Locking
Optimistic Locking using Compare and Swap Algorithm[CAS]
https://howtodoinjava.com/java/multi-threading/compare-and-swap-cas-algorithm/

Executor Services:
Throttling task submission rate using Threadpoolexecutor and semaphore:

In web servers, we can configure the maximum number of concurrent connections the server can handle at any point of time.
If more concurrent connections come at the same time, they will have to wait, untill some of the connections are freed or
closed.This is called throttling
Kind of API rate limiter, to stop the system from crashing or resource exhaustion

This throttling is handled by rejectedexecutionhandler in executor services
or
When executor is executing some tasks and in between, shutdown is called, so it will finish the current taks and will not accept any new tasks
In this case all the tasks submitted to the executor will get rejected, so that we can handle it by putting it in a queue to 
process it later or creating a alternate executor service to process these tasks.
https://examples.javacodegeeks.com/core-java/util/concurrent/rejectedexecutionhandler/java-util-concurrent-rejectedexecutionhandler-example/


CustomThreadPool Executor extends ThreadPoolExecutor(int initialPoolSize, int maxPoolSize, long leepAlive, TimeUnit time,BlockingQueue queue,
RejectedExecutionHandler handler)


