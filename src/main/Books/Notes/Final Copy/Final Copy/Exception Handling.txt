Exception:
Checked- These  are those exceptions which are checked at compile time, if a method throws a checked exception then the method must handle 
the exception using throws keyword

Unchecked-These are those exceptions which are not checked at compile but rather during run time

A method throws an exception with the keyword throw followed by a new exception object. When a method throws an exception, it uses throw keyword
Methods that might throw a checked exception must announce it with throws exception declaration

Superclass exception handling object may catch all type of exceptions but there is no need as we will be unsure of what exception it will throw
and what kind of code we will write to handle the exception

Multiple exceptions can be added using throws and all catch blocks must be ordered from smallest to biggest.
JVM scans down the tree/blocks untill it finds a catch block that is broad enough to handle the exception. Siblings in catch can be of any order but
it must follow the inheritance, first child then parent

A try block with only a finally block(no catch) must still declare the exception
If any method ducks the exception(by declaring it) and main method calls the method then main has to deal with the exception
If both method which declares the exception and ducks it and main method which calls the previous method also ducks it but declares the exception
then it compiles fine but if a method declares the exception and main method which calls the method doesn't declare it, then it throws compile
time error

It is because when we call a risky method, the compiler needs to acknowledge it. Many times it is done through try/catch, but if you don't want
to catch the exception just declare it

Throw and Throws-Multiple exception thrown by a method is declared using throws while only one instance of exception can be thrown using throw
Throws keyword can be used in exception method but throw method can be used inside method with sufficient exception handling block
