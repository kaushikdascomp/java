Module Creation:

Module creation requires package.json to be generated.
This can be done by doing--> npm init
Where it will ask for all the details to be inserted to package.json file

Finally if all the details are correct--> npm publish

Callback in node.js:
Callback is an asynchronous equivalent of a function. A callback function is called upon completion of a given task.
For example, a function to read a file may start reading file and return the control to the execution environment immediately 
so that the next instruction can be executed. Once file I/O is complete, it will call the callback function while passing the callback function, 
the content of the file as a parameter. So there is no blocking or wait for File I/O. This makes Node.js highly scalable, 
as it can process a high number of requests without waiting for any function to return results.

https://www.tutorialspoint.com/nodejs/nodejs_callbacks_concept.htm

Thus, a blocking program executes very much in sequence. From the programming point of view, it is easier to implement the logic 
but non-blocking programs do not execute in sequence. In case a program needs to use any data to be processed, it should be kept within the same block 
to make it sequential execution.

Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. 
Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. 
Node uses observer pattern. 
Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.
https://www.tutorialspoint.com/nodejs/nodejs_event_loop.htm

Event Emitter
EventEmitter provides multiple properties like on and emit. on property is used to bind a function with the event and emit is used to fire an event.

Difference between addListener and On:
Their functionalities are exactly the same, however, they can be used in different ways to make your code efficient. 
Lets assume you created a server and you create a listener, by using ".addListener(event, listener)", for every user that connects to your server. 
Now as soon as a user is disconnected, you can remove that listener by using the command "removeListener", 
but you cannot remove the ".on(event, listener)" command. So, you can use these two commands for different situations.

Also,
emitter.off(eventName, listener)
Alias for emitter.removeListener()
 


