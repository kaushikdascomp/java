SuperClass of all class in Java--

Object class is superclass of all classes. All classes implicitly extends the Object class
Java.lang.object

Static variables- It may be a number of times we initialize the class object but if we use static keyword only one instance of that variable is created
thus reducing the memory utilization

Static methods are called directly with the class name without creating a object of the class

StringBuffer is synchronized while StringBuilder is not. So stringbuilder is much fast for non-threaded applications

Why override hashcode and equals method: If not overriden, then duplicate values may reside in the memory with similar hashcode
only equal method overriden-
MyClass first = new MyClass("a","first");
MyClass second = new MyClass("a","second");

When we call mymap.put(first, somevalue), it will hash to some bucket and when we call mymap.put(second,someothervalue), it will hash to some other
bucket. So, although they are equal, they don't hash to same bucket and reside in the memory as two different objects

Only hashcode method overriden-Two different hashcodes are genrated for same object in two different buckets

main method is static because if static is not there then JVM needs to create an instance of the class before calling it

Diff between String new() and String literal. When we create without using new String s="abc" it is saved in the string pool whereas
when we create object using String s=new String("abc") it is saved in the heap

Vector and Arraylist-Synchronization,performance,Automatic increase in cpacity-Vector doubles its size while arraylist increases by 50%
Vector has enumeration and iterator while arraylist has only iterator

http://www.codeproject.com/Articles/126898/Sql-Server-How-To-Write-a-Stored-Procedure-in-SQL

Finalize:
http://stackoverflow.com/questions/2291470/why-is-the-finalize-method-in-java-lang-object-protected