HttpSerlet uses init() and destroy() are called once in servlet lifecycle and we need not worry about synchronization but service methods
doGet() and doPost() are geting called in every client request & since servlet uses multithreading we should provide thread safety in these 
methods

Call one servlet to another-Use requestDispather forward() method to forward the processing of a request to another servlet
Include another servlet output to response use RequestDispatcher include()

ServletResponse sendRedirect()

HttpServlet class is declared as abstract as there is no implementation and this class contains no abstract methods

Request Dispatcher interface is used to forward the request to another service which may be servlet, jsp, html in same application. Two methods 
defined in this interface 1. void forward-forwards the request to another resource  2. void include- include the content of resource in response

Diff between PrintWriter and ServletOutputStream--
PrintWriter is a character stream class whereas ServletOutputStream is a byte-stream class
ServletResponse getWriter() for printwriter and ServletResponse getOutputStream() to get ServletOutputStream 

Only one method can be called for a response in same class

ServletConfig and ServletContext--
Config is unique object per servlet and context is unique object per application
Config is used to provide init parameters to servlet & context is used to provide init parameters to application

HttpServlet extends GenericServlet as genericServlet provides servlet for general use. For web applications using Http port 80 we use 
HttpServlet
Servlet is always lazy loading i.e. not loaded when the servletContext is called but loaded when the first request is called
But by using loadOn startup we can change the initialization parameters i.e. servlet will be instantialized and loaded when
the container will start

Different ways of tracking the session:
URL rewriting
Cookies
Hidden form fields
SSL