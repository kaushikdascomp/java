Java-Design Patterns:
1. Design Patterns are best practices/ already proven solutions how to solve common know problems.
2. Another use is common language between developers.
3. 3 types - creational, structural, behavioral.
4. OOPS -> encapsulation - class + methods - capsule; no direct access to variables
           abstraction - class(variables+methods=data+behaviour); object is instance of class
           polymorphism - done through inheritance and interfaces (override functions) - many morphs
           inheritance - superclass n subclass; extends
           delegation - When an object receives a request, the object can either handle the request itself or pass the request on to a second object to do the work. If the object decides to pass the request on, you say that the object has forwarded responsibility for handling the request to the second object-delegate. 
           If you need to use functionality in another class but you do not want to change that functionality then use
           delegation instead of inheritance. 
           composition - 
           aggregation - 
           design by contract - 
           cohesion - system/class should be highly cohesive.
           PRINCICLE of least knowledge -  Talk only to your immediate friends. 
           Open Close Principle -  Software entities like classes, modules and functions should be open for extension but closed for modifications. 

Refer:- http://www.oodesign.com/
---------------------------------------------------------------------------------------------------------------------------------
Creational Patters: Class creational patterns use inheritance to vary the classes that are instantiated, and object creational patterns delegate instantiation to other objects.

Singleton, Factory, Abstract factory, Builder, Object Pool
---------------------------------------------------------------------------------------------------------------------------------
Singleton: 
1. Before 1.6, singleton class like this - 
public class Singleton {
  private static Singleton uniqInstance;

  private Singleton() {
  }

  public static synchronized Singleton getInstance() {
    if (uniqInstance == null) {
      uniqInstance = new Singleton();
    }
    return uniqInstance;
  }
  // other useful methods here
}
Later accessed as Singleton.getInstance().{methods}();

2. After 1.6, its like this - 
public enum UserActivity {
    INSTANCE;

    private DataSource _dataSource;
    private JdbcTemplate _jdbcTemplate;

    private UserActivity() {
        this._dataSource = MysqlDb.getInstance().getDataSource();
        this._jdbcTemplate = new JdbcTemplate(this._dataSource);
    }

    public void dostuff() {
     ...
    }
}
OR simply -
public enum MyEnumSingleton {
  INSTANCE; // this is imp here
  
  // other useful methods here
} 
Later, accessed as MyEnumSingleton.INSTANCE.{methods}() :) 
Just lastly that instance is created in the class only and same is returned on request - single

3. A static class with static method would result in the same functionality as a singleton. As singletons are define using an object orientated approach it is in general advised to work with singletons. 
4. A singleton cannot be subclassed as the constructor is declared private. 
5. There are many common situations when singleton pattern is used:
- Logger Classes
- Configuration Classes
- Accesing resources in shared mode
- Other design patterns implemented as Singletons: Factories and Abstract Factories, Builder, Prototype

---------------------------------------------------------------------------------------------------------------------------------
Factory Pattern:

1. Creates objects without exposing the instantiation logic to the client.
2. Refers to the newly created object through a common interface.

Factory: Creates objects without exposing the instantiation logic to the client and Refers to the newly created object through a common interface.
Factory Method: Defines an interface for creating objects, but let subclasses to decide which class to instantiate and Refers to the newly created object through a common interface.
Abstract Factory: Offers the interface for creating a family of related objects, without explicitly specifying their classes. 

---------------------------------------------------------------------------------------------------------------------------------
Behavioral Design Pattern: 

Iterator, Observer, Interpreter, Mediator, Strategy, Null Obj, Visitor...
---------------------------------------------------------------------------------------------------------------------------------
Iterator Pattern: Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation. 
1. The idea of the iterator pattern is to take the responsibility of accessing and passing trough the objects of the collection and put it in the iterator object. The iterator object will maintain the state of the iteration, keeping track of the current item and having a way of identifying what elements are next to be iterated. 

2. support multiple simultaneous traversals of a collection.
3. provide a uniform interface for traversing different collection. 
---------------------------------------------------------------------------------------------------------------------------------
Observer Pattern:

1. The observer pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.

2. The object which is being watched is called the subject. The objects which are watching the state changes are called observers or listeners. 

---------------------------------------------------------------------------------------------------------------------------------
Null Obj Pattern : Provide an object as a surrogate for the lack of an object of a given type.
    The Null Object Pattern provides intelligent do nothing behavior, hiding the details from its collaborators.
--------------------------------------------------------------------------------------------------------------------------------
Structural Design Pattern- Concept of inheritance is used
