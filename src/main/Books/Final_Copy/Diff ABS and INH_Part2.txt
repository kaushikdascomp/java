Implementation is not possible in interfaces. It can only declare default methods, static methods, constants

When an instantiable class implements an interface, it provides a method body for each of the methods declare in the interface

An abstract class cannot be instantiated, its only purpose is for other classes to extend i.e. object cannot be created i.e instance of the abstract class
cannot be created as object

Abstract class can have constructors provided in the concrete class. But if abstract class cannot be instantiated, the point in creating 
constructor, it can be used to initialize common variables which are declared inside abstract class and used by various implementation

Also if we don't provide constructor, sub class implicitly calls super() and uses default super class constructor

An abstract class can have both non-abstract as well as abstract methods
If atleast one abstract method is present then the class must be defined as abstract

Interfaces provide absolute abstraction and cannot have any method implementations

All interfaces/methods declared in an interface are inherited as abstract methods by any class that implements the interface
But if someone wants partial implementation then one can use abstract class

As abstract classes provide strong relationship between base classes, so if someone wants to add some methods in the abstract
class then it can be done without affteing all other sub classes
But if somebody is using interface then addition of extra code in the interface must be implemented by all sub classes

When extending a super class only java methods are inherited, constructors are not inherited

Basic function of constructor is creation of object of a class or instance

Constructor chaining and constructor overloading
Overloading is a process of declaring more than one constructor in Java
Chaining-to call one constructor from other in Java using this and super()

abstract class cannot have final as using final will prevent other classes to extend the class

Abstract classes are used when there is a probability of addition of extra methods in future but interface is used when temporarily the code is stable

Interface variables-- Variables o instance variables inside a interface are static and final and these cannot be extended
As interface doesn't have constructor, you should not be able to change the state of instance variables in interface
Why static because as interface doesn't have constructor, you should be able to access that instance variables from other class
And always public

Diff Between Equals and Hashcode()
1. If two objects are equal, then they must have the same hashcode
2. but if two objects have same hashcode, they may not be equal i.e. equals lies inside hashcode()

An abstract class can have a constructor but it cannot be instantiated using new keyword. 
The reson behind abstract class has constructor because when an class extend abstract class constructor of sub class extend constructor of
super class either implicitly or explicitly. This chaining of constructor is one of the main reason behind abstract class has constructors	

